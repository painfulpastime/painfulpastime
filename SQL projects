--PROJECT DESCRIPTION: Porch & Posey is a fictional paper company's sales data for different paper types (standard, gloss, poster), customer accounts, order transactions, sales people and region. 

--The questions attempted are from the SQL course on Udacity using PostgreSQL.



--1.  find the average number of events for each channel per day.

SELECT channel,
		AVG(no_of_times)
FROM (SELECT 	DATE_trunc('day', occurred_at),
		    channel,
        COUNT(*) as no_of_times
FROM web_events 
GROUP BY 1, 2
ORDER BY  3 desc) as Query1
GROUP BY 1
ORDER BY 2


--2.  Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.

SELECT 
    t3.rep_name,   
    t3.region_name, 
    t3.total_amt
FROM
(
    SELECT 
        region_name,
        MAX(total_amt) total_amt
        FROM(
            SELECT 
                s.name rep_name,
                r.name region_name,
                SUM(o.total_amt_usd) total_amt
            FROM sales_reps s
            JOIN accounts a
            ON a.sales_rep_id = s.id
            JOIN orders o
            ON o.account_id = a.id
            JOIN region r
            ON r.id = s.region_id
            GROUP BY 1, 2)t1
    GROUP BY 1) t2
    JOIN (
          SELECT   
              s.name rep_name,
              r.name region_name,
              SUM(o.total_amt_usd) total_amt
          FROM sales_reps s
          JOIN accounts a
          ON a.sales_rep_id = s.id
          JOIN orders o
          ON o.account_id = a.id
          JOIN region r
          ON r.id = s.region_id
          GROUP BY 1,2
          ORDER BY 3 DESC) t3
ON t3.region_name = t2.region_name AND t3.total_amt = t2.total_amt;



--3. How many accounts had more total purchases than the account name which has bought the most standard_qty paper throughout their lifetime as a customer?

SELECT a.name,
	      SUM(o.total)
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name
HAVING SUM(o.total)> (SELECT 	
                            SUM(o.standard_qty)
                      FROM accounts a
                      JOIN orders o
                      ON a.id = o.account_id
                      GROUP BY a.name
                      ORDER BY 1 desc
                      limit 1) 

--4. What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?

SELECT AVG(tot_spent)
FROM (SELECT a.id, 
            a.name, 
            SUM(o.total_amt_usd) tot_spent
     FROM orders o
     JOIN accounts a
     ON a.id = o.account_id
     GROUP BY a.id, a.name
     ORDER BY 3 DESC
     LIMIT 10) temp;


--5.  What is the lifetime average amount spent in terms of **total_amt_usd**, including only the companies that spent more per order, on average, than the average of all orders.

WITH t2 as (
    WITH t1 as (
            SELECT 
            avg(o.total_amt_usd) mean
            FROM accounts a
            JOIN orders o
            ON a.id = o.account_id)

    SELECT 
          a.name,
		      avg(o.total_amt_usd) mean2
    FROM accounts a
    JOIN orders o
    ON a.id = o.account_id
    group by 1
    HAVING avg(o.total_amt_usd) > (SELECT mean from t1))
                              
    SELECT avg(mean2)
    FROM t2




--6.   Use the accounts table to create first and last name columns that hold the first and last names for the primary_poc.


SELECT 
    LEFT(primary_poc, STRPOS(primary_poc, ' ') -1 ) first_name, 
    RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name
FROM accounts;


--7.  Use COALESCE to fill in each of the qty and usd columns with 0 in the table

SELECT 
    COALESCE(o.id, a.id) filled_id, 
    a.name, 
    a.website, 
    a.lat, a.long, 
    a.primary_poc,
    a.sales_rep_id, 
    COALESCE(o.account_id, a.id) account_id, 
    o.occurred_at, 
    COALESCE(o.standard_qty, 0) standard_qty,
    COALESCE(o.gloss_qty,0) gloss_qty,
    COALESCE(o.poster_qty,0) poster_qty, 
    COALESCE(o.total,0) total, 
    COALESCE(o.standard_amt_usd,0) standard_amt_usd,
    COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, 
    COALESCE(o.poster_amt_usd,0) poster_amt_usd, 
    COALESCE(o.total_amt_usd,0) total_amt_usd
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id;


--WINDOW FUNCTIONS
--8. Create a running total of standard_amt_usd (in the orders table) over order time with no date truncation. Your final table should have two columns: one with the amount being added for each new row, and a second with the running total.

SELECT standard_amt_usd,
       SUM(standard_amt_usd) OVER (ORDER BY occurred_at) AS running_total
FROM orders




--9.Select the id, account_id, and total variable from the orders table, then create a column called total_rank that ranks this total amount of paper ordered (from highest to lowest) for each account using a partition. Your final table should have these four columns.

SELECT 
    id,
		account_id,
    total,
    RANK() OVER(PARTITION BY account_id ORDER BY total desc) as total_rank
FROM orders




--10. run a query that gives the running totals of the sum, the count, the average, the minimum, and the maximum of total_amt_usd as separate columns ordered by truncated date by year, and partitioned by account id

SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER account_year_window AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER account_year_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER account_year_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER account_year_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER account_year_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER account_year_window AS max_total_amt_usd
FROM orders 
WINDOW account_year_window AS (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at))




--PERCENTILES
--11. Use the NTILE functionality to divide the accounts into 4 levels in terms of the amount of standard_qty for their orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of standard_qty paper purchased, and one of four levels in a standard_quartile column.

SELECT 	
    account_id,
		occurred_at,
		standard_qty,
		NTILE(4) OVER (PARTITION BY account_id ORDER BY standard_qty desc) as standard_quartile
FROM orders
WHERE standard_qty > 0



--11. You want to see:
    each account that has a sales rep and each sales rep that has an account (all of the columns in these returned rows will be full)
    but also each account that does not have a sales rep and each sales rep that does not have an account (some of the columns in these returned rows will be empty)


SELECT 
	  s.name,
    a.id
FROM sales_reps s
FULL OUTER JOIN accounts a
ON s.id = a.sales_rep_id
WHERE s.id IS NULL OR a.sales_rep_id IS NULL
